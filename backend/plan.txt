Backend Development Plan for java-recipe
This document outlines the high-level plan for developing the backend of the java-recipe web application. It serves as a guide for development and context for AI assistance.

1. Project Overview
Project Name: java-recipe

Purpose: An online platform for sharing recipes, allowing users to upload, view, comment on, like, favorite, and review recipes. It will also include a notification system and basic admin functionalities.

Monorepo Structure: The backend (this project) is part of a monorepo (panadolextra91-java-recipe/backend).

2. System Architecture
Choice: Modular Monolith

Reasoning: Chosen to simplify initial development, reduce complexity compared to microservices, ensure faster iterations, and provide a clear path for future scaling by maintaining strong internal modularity.

3. Technology Stack
Core Framework: Spring Boot (Java)

Build Tool: Gradle

ORM: Hibernate (as the JPA provider) with Spring Data JPA

Database: MySQL

Security: Spring Security (for authentication and authorization, likely using JWT for API security).

External Services: Cloudinary for image storage (implemented), email service for password resets (implemented).

4. Key Backend Features Implementation Status
The backend exposes RESTful APIs to support the following functionalities:

4.1. User Management âœ… COMPLETED
âœ… User Registration and Login - JWT-based authentication

âœ… User Profile Management (including display_name, bio, avatar_url)

âœ… Password Hashing (BCrypt)

âœ… User Roles (USER, ADMIN) for authorization

âœ… Forgot Password / Password Reset (via email) - Email service integration

âœ… Manual Password Change - Simple password change with current password verification (no constraints)

4.2. Recipe Management âœ… COMPLETED
âœ… CRUD (Create, Read, Update, Delete) operations for recipes

âœ… Recipe fields: title, description, prep_time_minutes, cook_time_minutes, servings, is_published

âœ… Association with RecipeImages (multiple images per recipe)

âœ… Association with Ingredients (list of ingredients)

âœ… Association with Instructions (step-by-step guide)

âœ… Association with Categories (multiple categories per recipe)

âœ… Association with ConsumerWarnings (multiple warnings per recipe)

âœ… View Count: Track view_count for each recipe to enable "famous recipe" leaderboard

4.3. User Interactions âœ… COMPLETED
âœ… Comments: Users can post comments on recipes with full CRUD operations

âœ… Replies: Users can reply to comments (nested comment system)

âœ… Likes: Users can like/unlike recipes and comments with toggle functionality

âœ… Favorites: Users can favorite/unfavorite recipes with pagination support

âœ… Reviews & Star Ratings: Users can submit reviews with ratings (1-5 stars) and text comments. Recipes store aggregated average_rating and review_count with automatic updates

4.4. Notifications âœ… COMPLETED
âœ… System notifications for users with 5 types:
   - Recipe likes: "user liked your recipe"
   - Recipe comments: "user commented on your recipe"
   - Comment replies: "user replied to your comment"
   - Comment likes: "user liked your comment"
   - Recipe reviews: "user reviewed your recipe"

âœ… Smart notification batching for likes (1-hour time window to prevent spam)

âœ… Notification types and associated entities/messages with rich context

âœ… Marking notifications as read (individual and bulk operations)

âœ… Pagination support and unread count tracking

âœ… Self-notification prevention (users don't get notified for their own actions)

4.8. Image Management âœ… COMPLETED
âœ… Cloudinary Integration - Full SDK integration with secure configuration

âœ… Recipe Image Upload - Direct multipart file upload with automatic optimization (800x600, quality auto)

âœ… Avatar Image Management - Upload, delete, and change user avatars (200x200, face-focused cropping)

âœ… Image Processing - Automatic resizing, compression, format optimization (WebP/AVIF)

âœ… Image Validation - File type, size (10MB limit), and content validation

âœ… Smart Image Management - Automatic old image deletion when uploading new ones

âœ… Public ID Extraction - Utility for extracting Cloudinary public IDs from URLs for deletion

âœ… Multiple Upload Endpoints - Specialized endpoints for recipes, avatars, and general images

4.9. Admin Management System âœ… COMPLETED
âœ… Category Management - Full CRUD operations for recipe categories with usage tracking

âœ… Consumer Warning Management - Complete CRUD for allergen/dietary warnings with recipe count tracking

âœ… User Management - Comprehensive admin control over all users with activity metrics

âœ… User Status Management - Activate/deactivate user accounts with proper validation

âœ… Role Management - Promote/demote users between USER and ADMIN roles

âœ… User Activity Tracking - Real-time metrics (recipes, comments, reviews, likes, favorites)

âœ… Advanced User Search - Multi-field search and filtering by status, role, activity

âœ… Safe User Operations - Protected deletion with content validation

âœ… Admin-Only Access - Proper role-based authorization for all admin endpoints

âœ… Public Warning Access - Users can view and assign warnings to their recipes

4.10. Search Functionality âœ… COMPLETED
âœ… Search recipes by title, ingredients, categories, warnings

âœ… "Recipes I Can Make" Feature - Complete ingredient-based recipe search system

âœ… Ingredient Discovery - Extract and search all available ingredients from recipes

âœ… Recipe Matching Algorithm - Sophisticated matching with percentage calculations

âœ… Match Percentage Calculation - Accurate ingredient availability tracking

âœ… Flexible Search Criteria - Filter by match percentage, exact matches, categories

âœ… Smart Ingredient Search - Case-insensitive search with recipe count tracking

âœ… Missing Ingredient Tracking - Shows exactly what ingredients are needed

âœ… Multiple Sorting Options - Sort by match percentage, rating, views, date

âœ… Comprehensive API - Complete endpoints for ingredient-based recipe discovery

4.11. Additional Features âœ… COMPLETED
âœ… Comprehensive error handling and validation across all endpoints

âœ… Pagination support for all list operations (recipes, comments, notifications, favorites)

âœ… Authorization and authentication with JWT tokens

âœ… Database relationships and constraints properly implemented

âœ… Comprehensive test coverage for all major functionality

5. Database Schema Strategy
Approach: Code-First with JPA/Hibernate.

Process:

Define Java classes (@Entity) in com.javarecipe.backend.<module_name> packages (e.g., com.javarecipe.backend.user.User).

Use JPA annotations (@Table, @Column, @Id, @GeneratedValue, @OneToMany, @ManyToOne, etc.) to map entities to MySQL tables and define relationships.

Configure spring.jpa.hibernate.ddl-auto=update in application.properties during development to automatically create/update the MySQL schema.

MySQL Workbench will be used for viewing the generated schema and managing data, not for direct schema definition.

6. Development Workflow / Cursor AI Focus
Modular Design: When generating code, follow the established modular structure (e.g., user, recipe, comment, interaction, notification packages).

JPA Entities: Focus on correctly defining all entities with appropriate fields, data types, constraints (nullable, unique, length), and relationships using JPA annotations.

Repositories: Generate Spring Data JPA repositories for each entity.

Services: Implement business logic within dedicated service classes that interact with repositories.

Controllers: Create RESTful controllers that expose APIs for all defined features.

Database Interactions: Ensure that database operations (CRUD, incrementing counters, transactional updates for aggregate fields like average_rating) are handled correctly and efficiently.

This plan provides a clear roadmap for the backend development, leveraging Java Spring Boot and Hibernate within the modular monolith architecture.

7. Implementation Summary (Current Status)
As of July 2025, the backend implementation is significantly advanced with the following major systems completed:

âœ… FULLY IMPLEMENTED:
- User Management System (registration, login, profiles, password reset, manual password change)
- Recipe Management System (full CRUD with images, ingredients, instructions)
- Comment System (comments and replies with nested structure)
- Like/Unlike System (recipes and comments with toggle functionality)
- Favorite System (recipe favoriting with pagination)
- Review & Rating System (1-5 star ratings with aggregated statistics)
- Notification System (5 types with smart batching for likes)
- Image Management System (Cloudinary integration for recipes and avatars)
- Avatar Management (upload, delete, change with automatic optimization)
- Admin Management System (complete category, warning, and user management)
- Admin Category Management (CRUD with usage tracking and validation)
- Admin Consumer Warning Management (CRUD with recipe count tracking)
- Admin User Management (comprehensive user control with activity metrics)
- User Search & Filtering (advanced search by multiple criteria)
- Role Management (promote/demote users with proper validation)
- Recipe Search System (ingredient-based "Recipes I Can Make" functionality)
- Ingredient Discovery & Search (extract and search all available ingredients)
- Recipe Matching Algorithm (sophisticated percentage-based matching)
- Authentication & Authorization (JWT-based with role management)
- Database Schema (all entities and relationships properly defined)
- Comprehensive Testing (unit tests for all major functionality)

ðŸš§ REMAINING WORK:
- Content Moderation & Reporting (user reporting mechanism)

The backend is production-ready for core recipe sharing functionality with a robust notification system that prevents spam through intelligent batching, complete image management via Cloudinary, comprehensive avatar management capabilities, a full admin management system for categories, warnings, and users, and an intelligent "Recipes I Can Make" search system for ingredient-based recipe discovery.